<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App with Geolocation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Montserrat", sans-serif;
        }
        body {
            background-color: #f6f2f8;
        }
        .container {
            background-color: #d7c3df;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.4);
            text-align: center;
            max-width: 600px;
            margin: 0 auto;
            margin-top: 50px;
            border-radius: 10px;
            padding: 20px;
        }
        .container h1 {
            font-size: 32px;
            padding-bottom: 1rem;
        }
        .weather-btn {
            background-color: #784a8c;
            color: #fff;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 18px;
            cursor: pointer;
            outline: none;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-top: 20px;
        }
        .weather-btn:hover {
            background-color: #a661c4;
            transform: translateY(-2px);
        }
        .weather-btn:active {
            background-color: #5f3570;
            transform: translateY(0);
        }
        .icon img {
            width: 100px;
            height: 100px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center center;
        }
        .temperature {
            font-size: 48px;
            font-weight: bold;
            margin: 20px 0;
        }
        .description {
            font-size: 24px;
            margin-bottom: 20px;
        }
        .details {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
        }
        .details > div {
            padding: 20px;
            background-color: #c7a0d8;
            margin: 10px;
            flex: 1;
            border-radius: 5px;
            text-align: center;
            height: 70px;
            min-height: 45px;
        }
        @media (max-width: 768px) {
            form {
                flex-direction: column;
            }
            form input[type="text"] {
                width: 100%;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>

<div class="container">
    <h1>Weather App with Geolocation</h1>

    <!-- New button with class "weather-btn" -->
    <button class="weather-btn" onclick="getLocation()">Get Weather</button>

    <div id="demo">Waiting for location...</div>
    <div id="weather-data">
        <div class="location"></div>
        <div class="icon"></div>
        <div class="temperature"></div>
        <div class="description"></div>
        <div class="details"></div>
    </div>
</div>

<script>
const apikey = "4adf71ba0e00d7efbe904c6b937fe2ca";
const weatherDataEl = document.getElementById("weather-data");
const locationEl = document.querySelector(".location");
const x = document.getElementById("demo");

function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition, showError);
    } else {
        x.innerHTML = "Geolocation is not supported by this browser.";
    }
}

function showPosition(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    x.innerHTML = `Latitude: ${lat} <br>Longitude: ${lon}`;

    // Get the nearest city using reverse geocoding and then fetch weather data
    getCityAndWeather(lat, lon);
}

async function getCityAndWeather(lat, lon) {
    try {
        // Reverse geocoding to get city name from latitude and longitude
        const geoResponse = await fetch(`http://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&limit=1&appid=${apikey}`);
        const geoData = await geoResponse.json();
        const city = geoData[0].name;
        locationEl.textContent = `Location: ${city}`;

        // Fetch weather data for the location
        getWeatherData(lat, lon);
    } catch (error) {
        locationEl.textContent = "Could not retrieve location.";
    }
}

async function getWeatherData(lat, lon) {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apikey}&units=metric`);

        if (!response.ok) {
            throw new Error("Network response was not ok");
        }

        const data = await response.json();
        console.log(data);

        const temperature = Math.round(data.main.temp);
        const description = data.weather[0].description;
        const icon = data.weather[0].icon;

        const details = [
            `Feels like: ${Math.round(data.main.feels_like)}°C`,
            `Humidity: ${data.main.humidity}%`,
            `Wind Speed: ${data.wind.speed} m/s`,
        ];

        weatherDataEl.querySelector(".icon").innerHTML = `<img src="http://openweathermap.org/img/wn/${icon}.png" alt="Weather Icon">`;
        weatherDataEl.querySelector(".temperature").textContent = `${temperature}°C`;
        weatherDataEl.querySelector(".description").textContent = description;
        weatherDataEl.querySelector(".details").innerHTML = details.map((detail) => `<div>${detail}</div>`).join("");

    } catch (error) {
        weatherDataEl.querySelector(".icon").innerHTML = "";
        weatherDataEl.querySelector(".temperature").textContent = "";
        weatherDataEl.querySelector(".description").textContent = "An error happened while retrieving weather data.";
        weatherDataEl.querySelector(".details").innerHTML = "";
    }
}

function showError(error) {
    switch (error.code) {
        case error.PERMISSION_DENIED:
            x.innerHTML = "User denied the request for Geolocation.";
            break;
        case error.POSITION_UNAVAILABLE:
            x.innerHTML = "Location information is unavailable.";
            break;
        case error.TIMEOUT:
            x.innerHTML = "The request to get user location timed out.";
            break;
        case error.UNKNOWN_ERROR:
            x.innerHTML = "An unknown error occurred.";
            break;
    }
}
</script>

</body>
</html>

